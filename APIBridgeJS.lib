/**
 * Copyright (c) 2014 by Center Open Middleware. All Rights Reserved.
 * Titanium Appcelerator 3.2.0GA
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

(function () {

    "use strict";

    var eventHandlers = {};
    var methodHandlers = {};
    var appleOS;
    var id;
    var prefs = null;
    var inputs = {};
    var callCounter = 0;

    var _genericMethodHandler = function _genericMethodHandler(callback, methName, params, options, isAsync) {
        var methodInfo, data;

        if (methodHandlers[methName] == null) {
            methodHandlers[methName] = {};
        }

        callCounter = callCounter + 1;
        methodHandlers[methName][callCounter] = callback;

        methodInfo = methName.split('.');

        Ti.API.info('[APIBridge] Adding method listener: ' + methName + '_' + id + '_' + callCounter);
        Ti.App.addEventListener(methName + '_' + id + '_' + callCounter, _sendMethodResult.bind(this, methName, callCounter));

        data = {
        'method': {
            type: methodInfo[1],
            subapi: methodInfo[2],
            name: methodInfo[3],
            eventName: methName
        },
        'params': params,
        'options': options,
        'viewId': id,
        'callId': callCounter
        };

        if (!isAsync) {
            Ti.API.info('[APIBridge] Fire Event "APIMethod". data: ' + JSON.stringify(data));
            Ti.App.fireEvent('APIMethod', data);
        } else {
            Ti.API.info('[APIBridge] Fire Event "APIMethodAsync". data: ' + JSON.stringify(data));
            Ti.App.fireEvent('APIMethodAsync', data);
        }
    };

    var _sendMethodResult = function (methName, callCounter, data) {
        Ti.API.info('++++++++++++[APIBridge]+++++++++++++ HTML!!!');
        Ti.API.info('[APIBridge] Method result recived: ' + JSON.stringify(data.returnedData));
        //Ti.API.info('parseados?: ' + JSON.parse(data));
        if (methodHandlers[methName] == null || methodHandlers[methName][callCounter] == null) {
            // TODO Error. Callback not found
            Ti.API.info('[APIBridge] error in _sendMethodResult Callback not found');
        } else {
            // This solve iOs problem and i dont know why this run in Android without this fixed
            if (data.returnedData === undefined) {
                data.returnedData = null;
            }
            // Execute callback
            Ti.API.info('[APIBridge] invocando callback html...');
            methodHandlers[methName][callCounter](data.returnedData);
        }
    };

    // APIBridge definition
    Object.defineProperty(window, 'API', {value: {
                SW : {
                    Contacts : {
                        /** Get Authorization Property
                          * Condition AUTHORIZATION_UNKNOWN -> RequestAuthorization
                          * @param {function} Callback
                          * @return : AUTHORIZATION_AUTHORIZED or AUTHORIZATION_RESTRICTED */
                        getAuthorization: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.SW.Contacts.getAuthorization', [], null, true);
                        },
                        /** Get Contact List
                            * @param {function} Callback
                            * @param {Object} {'name': String} optional
                            * @return [contact] */
                        getContactList: function(callback, options) {
                            if (!(options instanceof Object) || options.value == null) {
                                options = null;
                            }
                            _genericMethodHandler.call(this, callback, 'API.SW.Contacts.getContactList', [], options);
                        },
                         /** Create Contact
                          * @param {function} Callback
                          * @param {Object}
                          * @return {Object} */
                        createContact: function(callback, options) {
                            if (!(options instanceof Object)) {
                                options = null;
                            }
                            _genericMethodHandler.call(this, callback, 'API.SW.Contacts.createContact', [], options);
                        },
                        /** Save Changes
                          * @param {function} Callback  */
                        saveChanges: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.SW.Contacts.saveChanges');
                        },
                        /** Revert Changes from last save
                          * @param {function} Callback  */
                        revertChanges: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.SW.Contacts.revertChanges');
                        },
                        /** Delete Contact
                          * @param {function} Callback
                          * @param {String} Contact Name
                          * @return {Number} */
                        deleteContact: function(callback, contactName) {
                            if (typeof contactName === "string") {
                                _genericMethodHandler.call(this, callback, 'API.SW.Contacts.deleteContact', [contactName]);
                            }
                        },
                    },
                    Calendar : {

                    },
                    FileSystem : {

                    },
                    DataBase : {

                    },
                    Log : {

                    },
                    Map : 
					(function () {
	
					"use strict";
					
					var Map = function Map(){
												
						var _allowedEventsData = {
							"map": {
								"click": {
									"asIs": ["clicksource", "latitude", "longitude", "subtitle", "title"],
									"id": ["annotation"]
								}, 
								"complete": {
									"asIs": [],
									"id": []
								},
								"longclick": {
									"asIs": ["latitude", "longitude"],
									"id": []
								},
								"regionchanged": {
									"asIs": ["animated", "latitude", "latitudeDelta", "longitude", "longitudeDelta"],
									"id": []
								},
								"postlayout": {
									"asIs": [],
									"id": []
								}
							},
							"polygon": {
								"click": {
									"asIs": ["latitude", "longitude", "type"],
									"id": ["source"]
								}
							},
							"annotation": {
								"click": {
									"asIs": ["latitude", "longitude", "type", "clicksource"],
									"id": ["source"]
								}
							}
						};
						
						/*
						 * CONSTANTS
						 */
						this.PRIORITY_BALANCED_POWER_ACCURACY = 102;
						this.PRIORITY_HIGH_ACCURACY = 100;
						this.PRIORITY_LOW_POWER = 104;
						this.PRIORITY_NO_POWER = 105;
						this.PRIORITY_UNDEFINED = -1;
						
						this.NORMAL_TYPE = 1;
						this.TERRAIN_TYPE = 3;
						this.SATELLITE_TYPE = 2;
						this.HYBRID_TYPE = 4;
						
						this.ANNOTATION_AZURE = 210.0;
						this.ANNOTATION_BLUE = 240.0;
						this.ANNOTATION_CYAN = 180.0;
						this.ANNOTATION_GREEN = 120.0;
						this.ANNOTATION_MAGENTA = 300.0;
						this.ANNOTATION_ORANGE = 30.0;
						this.ANNOTATION_RED = 0.0;
						this.ANNOTATION_ROSE = 330.0;
						this.ANNOTATION_VIOLET = 270.0;
						this.ANNOTATION_YELLOW = 60.0;
						
						this.LAYER_TYPE_WMS_1_1_1 = 1;
						this.LAYER_TYPE_WMS_1_3_0 = 2;
						this.FORMAT_PNG = 1;
						this.FORMAT_JPEG = 2;
						
						/**
						 * Check if there is support for the map.
						 * @param {callback} Function that receives a boolean. True if the map can be used.	
						 */
						this.isMapAvailable = function(callback){
							_genericMethodHandler.call(this, callback, 'API.SW.Map.isMapAvailable', [], null);
						};
						
						/**
						 * Creates a new map view.
						 * @param {Object} options. See http://docs.appcelerator.com/titanium/3.0/#!/api/Modules.Map.View
						 * @param {callback} Function that receives a MapView object. 	
						 */
						this.createMap = function(options, callback){
							var handleCreateMap = function(callback, mapId){
								callback(new MapView(mapId));
							}.bind(null, callback);
							_genericMethodHandler.call(this, handleCreateMap, 'API.SW.Map.createMap', [], options);
						};
						
						
						/**
						 * Creates an Annotation. 
						 * @param {Object} Options. See http://docs.appcelerator.com/titanium/3.0/#!/api/Modules.Map.Annotation
						 * @param {callback} Function that receives a Annotation object. 	
						 */
						this.createAnnotation = function(options, callback){
							var handleCreateAnnotation = function(callback, annotationId){
								if(annotationId != null)
									callback(new Annotation(annotationId));
							}.bind(null, callback);
							_genericMethodHandler.call(this, handleCreateAnnotation, 'API.SW.Map.createAnnotation', [], options);
						};
						
						
						/**
						 * Creates a Route. 
						 * @param {Object} Options. See http://docs.appcelerator.com/titanium/3.0/#!/api/Modules.Map.Route
						 * @param {callback} Function that receives a Route object. 	
						 */
						this.createRoute = function(options, callback){
							var handleCreateRoute = function(callback, routeId){
								if(routeId != null)
									callback(new Route(routeId));
							}.bind(null, callback);
							_genericMethodHandler.call(this, handleCreateRoute, 'API.SW.Map.createRoute', [], options);
						};
						
						
						/**
						 * Creates a Layer.
						 * @param {options} 
						 * 		- baseUrl: String with the url of the service
						 * 		- type: Type of service (Map.LAYER_TYPE_WMS_1_1_1 | Map.LAYER_TYPE_WMS_1_3_0)
						 * 		- name: String with the name of the layer.
						 * 		- srs: String with the srs of the layer.
						 * 		- visible: Boolean 
						 * 		- zIndex: Number ZIndex of the layer.
						 * 		- opacity: Number Percentage of opacity [0 - 100].
						 * 		- format: Tipe of image of the tiles (Map.FORMAT_PNG | Map.FORMAT_JPEG)
						 * @param {callback} Function that receives a Layer object. 
						 */
						this.createLayer = function(options, callback){
							var handleCreateLayer = function(callback, layerId){
								if(layerId != null)
									callback(new Layer(layerId));
							}.bind(null, callback);
							_genericMethodHandler.call(this, handleCreateLayer, 'API.SW.Map.createLayer', [], options);
						};
						
						
						/**
						 * Creates a Polygon. 
						 * @param {options} 
						 * 		- points: Array of points ({latitude: Number, longitude: Number})
						 * 		- holePoints: Array with holes. A hole is an array of points.
						 * 		- fillColor: Color
						 * 		- strokeColor: Color
						 * 		- strokeWidth: Number
						 * 		- annotation: Object (same properties of the createAnnotation method)
						 * @param {callback} Function that receives a Polygon object. 		
						 */
						this.createPolygon = function(options, callback){
							var handleCreatePolygon = function(callback, polygonId){
								if(polygonId != null)
									callback(new Polygon(polygonId));
							}.bind(null, callback);
							_genericMethodHandler.call(this, handleCreatePolygon, 'API.SW.Map.createPolygon', [], options);
						};
						
						
						/**
						 * Parses a given KML string  and returns an object with the polygons and routes of the file.
						 * @param {String} Data. The KML string to parse
						 * @param {callback} Called when the object with the results is ready and has it as argument.
						 * @return {Object}. Object with the format {polygons: array, routes: array}. Null if there was an exception while parsing the KML string .
						 */
						this.getShapesFromKml = function(data, callback){
							var handleGetShapes = function(callback, shapes){
								callback(shapes);
							}.bind(null, callback);
							_genericMethodHandler.call(this, handleGetShapes, 'API.SW.Map.getShapesFromKml', [data], null);
						};
						
						
						/**
						 * Parses a given WKT string  and returns an object with the polygons and routes.
						 * @param {data} The WKT string to parse
						 * @param {callback} Called when the object with the results is ready and has it as argument.
						 * @return {Object}. Object with the format {polygons: array, routes: array}. Null if there was an exception while parsing the WKT string .
						 */
						this.getShapesFromWkt = function(data, callback){
							var handleGetShapes = function(callback, shapes){
								callback(shapes);
							}.bind(null, callback);
							_genericMethodHandler.call(this, handleGetShapes, 'API.SW.Map.getShapesFromWkt', [data], null);
						};
						
						
						/**
						 * Parses a given GeoJson string  and returns an object with the polygons and routes of the file.
						 * @param {data} The GeoJson string to parse
						 * @param {callback} Called when the object with the results is ready and has it as argument.
						 * @return {Object}. Object with the format {polygons: array, routes: array}. Null if there was an exception while parsing the GeoJson string .
						 */
						this.getShapesFromGeoJson = function(data, callback){
							var handleGetShapes = function(callback, shapes){
								callback(shapes);
							}.bind(null, callback);
							_genericMethodHandler.call(this, handleGetShapes, 'API.SW.Map.getShapesFromGeoJson', [data], null);
						};
						
						
						
						var voidCallback = function(){ /*This callback is void*/};
						var events = {};
						
						//Create the event listener
						Ti.App.addEventListener("API_MAP_EVENT", function(eventInfo){
							
							var event = eventInfo.event;
							var elementId = eventInfo.elementId;
							var data = eventInfo.data;
							var elementType = eventInfo.elementType;
							
							if(events[elementType] != null && events[elementType][event] != null && events[elementType][event][elementId] != null){
								for(var index in events[elementType][event][elementId]){
									events[elementType][event][elementId][index](_filterEventData(elementType, event, data));
								}
							}
							
						});
						
						var _filterEventData = function(elementType, event, data){
							var newData = {};
							if(_allowedEventsData[elementType] != null && _allowedEventsData[elementType][event] != null){
								var asIs = _allowedEventsData[elementType][event]["asIs"];
								var id = _allowedEventsData[elementType][event]["id"];
								if(asIs != null){
									for(var x = 0; x < asIs.length; x++){
										var propertyType = asIs[x];
										newData[propertyType] = data[propertyType];
									}
								}
								if(id != null){
									for(var x = 0; x < id.length; x++){
										var propertyType = id[x];
										if(data[propertyType] != null){
											newData[propertyType] = _convertToElement(data[propertyType], elementType);
										}
											
									}
								}
							}
							
							return newData;
							
						};
						
						var _registerEventHandler = function(event, callback){
							
							if(event != null && event != "" && this.type != null && this.type != ""){
								
								var alreadyExists = false;
								if(events[this.type] != null && events[this.type][event] != null && events[this.type][event][this.id] != null)
									alreadyExists = true;
								else{
									if(events[this.type] == null)
										events[this.type] = {};
									if(events[this.type][event] == null)
										events[this.type][event] = {};
									events[this.type][event][this.id] = [];
								}
								
								events[this.type][event][this.id].push(callback);
								
								if(!alreadyExists){
									Ti.App.fireEvent("API_MAP_EDIT_EVENT", { action: "add", event: event, elementId: this.id, elementType: this.type });
								}
							}
							
						};
						
						var _removeEventHandler = function(event, callback){
							
							if(event != null && event != "" && this.type != null && this.type != "" && events[this.type] != null && events[this.type][event] != null && events[this.type][event][this.id] != null){
								
								var index = events[this.type][event][this.id].indexOf(callback);
								if(index != -1){
									events[this.type][event][this.id].splice(index, 1);
									Ti.App.fireEvent("API_MAP_EDIT_EVENT", {action: "remove", event: event, elementId: this.id, elementType: this.type });
								}
									
							}
							
						};
						
						var MapView = function MapView(id){
						
							this.id = id;
							this.type = "map";
							
							
							/**
							 * Adds the map view to a view.
							 * @param {String} The id of the view.
							 * @param {Object} Options. Top, left, right, bottom, height, width.
							 */
							this.addBound = function(options){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.addBound', [this.id, id], options);
							};
							
							
							/**
							 * Sets the bounds of the map view.
							 * @param {String} The id of the view.
							 * @param {Object} Options. Top, left, right, bottom, height, width.
							 */
							this.setBound = function(viewId, options){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.setBound', [this.id, viewId], options);
							};
							
							
							/**
						     * Removes the map from the view that contains it
						     */
							this.removeBound = function(){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.removeBound', [this.id], null);
							};
							
							
							/**
						  	 * Zooms in or out by specifying a relative zoom level. 
						  	 * @param {Number} delta. A positive value increases the current zoom level and a negative value decreases the zoom level. 
						  	 */
							this.zoom = function(delta){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.getShapesFromGeoJson', [this.id, delta]);
							};
							
							
							/**
						     * Changes the location of the map.
						     * @param {Object} location. See http://docs.appcelerator.com/titanium/3.0/#!/api/Modules.Map.View-method-setLocation
						     */
							this.setLocation = function(location){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.setLocation', [this.id, location]);
							};
							
							
							/**
							 * Set how the map should follow the location of the device.
							 * @param {Boolean} followLocation. True if the map camera must follow the location of the device. 
							 * @param {Boolean} followBearing. True if the map camera must follow the bearing of the device.
							 * @param {Object} options:
							 * 		- {interval} LocationRequest desired interval in milliseconds. Must be > 0; otherwise, default value is 1000.
							 * 		- {priority} LocationRequest priority (PRIORITY_BALANCED_POWER_ACCURACY, PRIORITY_HIGH_ACCURACY, PRIORITY_LOW_POWER, PRIORITY_NO_POWER, PRIORITY_UNDEFINED).
							 */
							this.followLocation = function(followLocation, followBearing, options){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.followLocation', [this.id, followLocation, followBearing], options);
							};
							
							
							/**
						     * Gets the value of a property of the map.
						     * @param {String} propertyName. String with the name of the property or array with a list of properties.
						     * @param {callback} Callback function to invoke with the value of the property, or a hashmap of properties and values.
						     */
							this.getProperty = function(propertyName, callback){
								
								var _callback = function(_res){
									
									var _processProperty = function(_propValue){
										var _newValue = null;
										if(propertyName === "annotations")
											return _convertToElementsArray(_propValue, 'annotation');
										else if(propertyName === "polygons")
											return _convertToElementsArray(_propValue, 'polygon');
										else if(propertyName === "routes")
											return _convertToElementsArray(_propValue, 'route');
										else if(propertyName === "layers")
											return _convertToElementsArray(_propValue, 'layer');
										else
											return _propValue;
									};
									
									if(propertyName instanceof Array){
				        		
						        		var _newRes = {};
						        		
						        		for(var _propName in _res){
						        			var val = _processProperty(_res[_propName]);
						        			if(typeof(val) !== 'undefined'){
						        				_newRes[_propName] = val;
						        			}
						        		}
						        		
						        		callback(_newRes);
						        		
						        	} else {
										callback(_processProperty(_res));
									}
										
								};
								
								_genericMethodHandler.call(this, _callback, 'API.SW.Map.getMapProperty', [this.id, propertyName]);
							};
							
							/**
						     * Gets all the properties of the map.
						     * @param {callback} Callback function to invoke with the hashmap of properties and values.
						     */
							this.getAllProperties = function(callback){
								this.getProperty(["userLocation", "userLocationButton", "mapType", "region", "animate", "traffic", "enableZoomControls", 
													"rect", "region", "zoom", "annotations", "polygons", "layers", "routes"], callback);
							};
							
							
							/**
						     * Sets the value of a property of the map.
						     * @param {String} propertyName. String with the name of the property.
						     * @param {Object} propertyValue. The value to be set for the property.
						     */
							this.setProperty = function(propertyName, propertyValue){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.setMapProperty', [this.id, propertyName, propertyValue]);
							};
							
							
							/**
							 * Add an annotation to the map.
							 * @param {Object} annotation. The Annotation object.
							 */
							this.addAnnotation = function(annotation){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.addAnnotation', [this.id, annotation.id]);
							};
							
							
							/**
							 * Selects an annotation in the map.
							 * @param {Object} annotation. The Annotation object.
							 */
							this.selectAnnotation = function(annotation){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.selectAnnotation', [this.id, annotation.id]);
							};
							
							
							/**
							 * Deselects an annotation in the map.
							 * @param {Object} annotation. The Annotation object.
							 */
							this.deselectAnnotation = function(annotation){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.deselectAnnotation', [this.id, annotation.id]);
							};
							
							
							/**
							 * Removes an annotation from the map.
							 * @param {Object} annotation. The Annotation object.
							 */
							this.removeAnnotation = function(annotation){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.removeAnnotation', [this.id, annotation.id]);
							};
							
							
							/**
							 * Removes multiple annotations from the map.
							 * @param {Object} annotation. Array of Annotation objects.
							 */
							this.removeAnnotations = function(annotations){
								var ids = [];
								for(var i in annotations){
									if(annotations[i].id != null)
										ids.push(annotations[i].id);
								}
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.removeAnnotations', [this.id, ids]);
							};
							
							
							/**
							 * Removes all the annotations from a map.
							 */
							this.removeAllAnnotations = function(){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.removeAllAnnotations', [this.id]);
							};
							
							
							 /**
							 * Add a route to the map.
							 * @param {Object} route. The Route object to add.
							 */
							this.addRoute = function(route){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.addRoute', [this.id, route.id]);
							};
							
							
							/**
							 * Removes a route from the map.
							 * @param {Object} route. The Route object to add.
							 */
							this.removeRoute = function(route){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.removeRoute', [this.id, route.id]);
							};
							
							
							/**
							 * Removes all the routes from the map.
							 */
							this.removeAllRoutes = function(){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.removeAllRoutes', [this.id]);
							};
							
							
							/**
							 * Add a polygon to the map.
							 * @param {Object} polygon. The Polygon object.
							 */
							this.addPolygon = function(polygon){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.addPolygon', [this.id, polygon.id]);
							};
							
							
							/**
							 * Removes a polygon from the map.
							 * @param {Object} polygon. The Polygon object.
							 */
							this.removePolygon = function(polygon){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.removePolygon', [this.id, polygon.id]);
							};
							
							
							/**
							 * Removes all the polygons from the map.
							 */
							this.removeAllPolygons = function(){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.removeAllPolygons', [this.id]);
							};
							
							
							/**
							 * Add a layer to the map.
							 * @param {Object} layer. The Layer object.
							 */
							this.addLayer = function(layer){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.addLayer', [this.id, layer.id]);
							};
							
							
							/**
							 * Removes a layer from the map.
							 * @param {Object} layer. The Layer object.
							 */
							this.removeLayer = function(layer){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.removeLayer', [this.id, layer.id]);
							};
							
							
							/**
							 * Removes all the layers from the map.
							 */
							this.removeAllLayers = function(){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.removeAllLayers', [this.id]);
							};
							
							/**
						     * Gets the base layer 
						     * @param {callback} Callback function to invoke the base layer (can be a layer id (String) or a google layer id (Integer)).
						     */
							this.getBaseLayer = function(callback){
								_genericMethodHandler.call(this, callback, 'API.SW.Map.getBaseLayer', [this.id]);
							};
							
							
							/**
						     * Set the base layer of the map.
						 	 * @param {Object} layer  A layer object or the constant of a Google Layer.
						     */
							this.setBaseLayer = function(layer){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.setBaseLayer', [this.id, (layer.id != null ? layer.id : layer)]);
							};
							
							
							/**
							 * Adds the specified callback as an event listener for the named event.
							 * @param {event} Name of the event. Allowed events: ["click", "complete", "longclick", "regionchanged", "postlayout"]
							 * @param {callback} Callback function to invoke when the event is fired.
							 */
							this.addEventListener = function(event, callback){
								if(_allowedEventsData[this.type][event] != null)
									_registerEventHandler.call(this, event, callback);
							};
							
							
							/**
							 * Removes the specified callback as an event listener for the named event.
							 * Multiple listeners can be registered for the same event, so the callback parameter is used to determine which listener to remove. 
							 * @param {event} Name of the event. Allowed events: ["click", "complete", "longclick", "regionchanged", "postlayout"]
							 * @param {callback} Callback function to invoke when the event is fired.
							 */
							this.removeEventListener = function(event, callback){
								if(_allowedEventsData[this.type][event] != null)
									_removeEventHandler.call(this, event, callback);
							};
								
							
						};
						
						var Annotation = function Annotation(id){
							this.id = id;
							this.type = "annotation";
							
							
							/**
						     * Gets the value of a property of the annotation.
						     * @param {String} propertyName. String with the name of the property.
						     * @param {callback} Callback function to invoke with the value of the property, or a hashmap of properties and values.
						     */
							this.getProperty = function(propertyName, callback){
								_genericMethodHandler.call(this, callback, 'API.SW.Map.getAnnotationProperty', [this.id, propertyName]);
							};
							
							
							/**
						     * Gets all the properties of the annotation.
						     * @param {callback} Callback function to invoke with the hashmap of properties and values.
						     */
							this.getAllProperties = function(callback){
								this.getProperty(["id", "subtitle", "subtitleid", "title", "titleid", "latitude", "longitude", "draggable", 
													"image", "pincolor", "customView", "leftButton", "leftView", "rightButton", "rightView", 
													"showInfoWindow", "visible"], callback);
							};
							
							
							/**
						     * Sets the value of a property of the annotation.
						     * @param {String} propertyName. String with the name of the property.
						     * @param {propertyValue} The value to be set for the property.
						     */
							this.setProperty = function(propertyName, propertyValue){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.setAnnotationProperty', [this.id, propertyName, propertyValue]);
							};
							
							/**
							 * Adds the specified callback as an event listener for the named event.
							 * @param {event} Name of the event.
							 * @param {callback} Callback function to invoke when the event is fired.
							 */
							this.addEventListener = function(event, callback){
								if(_allowedEventsData[this.type][event] != null)
									_registerEventHandler.call(this, event, callback);
							};
							
							
							/**
							 * Removes the specified callback as an event listener for the named event.
							 * Multiple listeners can be registered for the same event, so the callback parameter is used to determine which listener to remove. 
							 * @param {event} Name of the event.
							 * @param {callback} Callback function to invoke when the event is fired.
							 */
							this.removeEventListener = function(event, callback){
								if(_allowedEventsData[this.type][event] != null)
									_removeEventHandler.call(this, event, callback);
							};
						};
						
						var Polygon = function Polygon(id){
							this.id = id;
							this.type = "polygon";
							
							/**
						     * Gets the value of a property of the polygon.
						     * @param {String} propertyName. String with the name of the property.
						     * @param {callback} Callback function to invoke with the value of the property, or a hashmap of properties and values.
						     */
							this.getProperty = function(propertyName, callback){
								_genericMethodHandler.call(this, callback, 'API.SW.Map.getPolygonProperty', [this.id, propertyName]);
							};
							
							
							/**
						     * Gets all the properties of the polygon.
						     * @param {callback} Callback function to invoke with the hashmap of properties and values.
						     */
							this.getAllProperties = function(callback){
								this.getProperty(["id", "points", "holePoints", "strokeWidth", "strokeColor", "fillColor", "annotationId", "zIndex"], callback);
							};
							
							
							/**
						     * Sets the value of a property of the polygon.
						     * @param {String} propertyName. String with the name of the property.
						     * @param {Object} propertyValue. The value to be set for the property.
						     */
							this.setProperty = function(propertyName, propertyValue){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.setPolygonProperty', [this.id, propertyName, propertyValue]);
							};
							
							
							/**
							 * Adds the specified callback as an event listener for the named event.
							 * @param {event} Name of the event.
							 * @param {callback} Callback function to invoke when the event is fired.
							 */
							this.addEventListener = function(event, callback){
								if(_allowedEventsData[this.type][event] != null)
									_registerEventHandler.call(this, event, callback);
							};
							
							
							/**
							 * Removes the specified callback as an event listener for the named event.
							 * Multiple listeners can be registered for the same event, so the callback parameter is used to determine which listener to remove. 
							 * @param {event} Name of the event.
							 * @param {callback} Callback function to invoke when the event is fired.
							 */
							this.removeEventListener = function(event, callback){
								if(_allowedEventsData[this.type][event] != null)
									_removeEventHandler.call(this, event, callback);
							};
						};
						
						
						var Route = function Route(id){
							this.id = id;
							this.type = "route";
							
							
							/**
						     * Gets the value of a property of the route.
						     * @param {String} propertyName. String with the name of the property.
						     * @param {callback} Callback function to invoke with the value of the property, or a hashmap of properties and values.
						     */		
							this.getProperty = function(propertyName, callback){
								_genericMethodHandler.call(this, callback, 'API.SW.Map.getRouteProperty', [this.id, propertyName]);
							};
							
							
							/**
						     * Gets all the properties of the route.
						     * @param {callback} Callback function to invoke with the hashmap of properties and values.
						     */
							this.getAllProperties = function(callback){
								this.getProperty(["id", "points", "width", "color"], callback);
							};
							
							
							/**
						     * Sets the value of a property of the route.
						     * @param {String}propertyName.  String with the name of the property.
						     * @param {Object} propertyValue. The value to be set for the property.
						     */
							this.setProperty = function(propertyName, propertyValue){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.setRouteProperty', [this.id, propertyName, propertyValue]);
							};
							
						};
						
						var Layer = function Layer(id){
							this.id = id;
							this.type = "layer";
							
							
							/**
						     * Gets the value of a property of the layer.
						     * @param {String} propertyName. String with the name of the property.
						     * @param {callback} Callback function to invoke with the value of the property, or a hashmap of properties and values.
						     */
							this.getProperty = function(propertyName, callback){
								_genericMethodHandler.call(this, callback, 'API.SW.Map.getLayerProperty', [this.id, propertyName]);
							};
							
							
							/**
						     * Gets all the properties of the layer.
						     * @param {callback} Callback function to invoke with the hashmap of properties and values.
						     */
							this.getAllProperties = function(callback){
								this.getProperty(["id", "baseUrl", "type", "name", "srs", "visible", "zIndex", "opacity", "format", "style", "tyleMatrixSet"], callback);
							};
							
							
							/**
						     * Sets the value of a property of the layer.
						     * @param {String} propertyName. String with the name of the property.
						     * @param {Object} propertyValue. The value to be set for the property.
						     */
							this.setProperty = function(propertyName, propertyValue){
								_genericMethodHandler.call(this, voidCallback, 'API.SW.Map.setLayerProperty', [this.id, propertyName, propertyValue]);
							};
							
						};
						
						
						/**
						 * Converts an array of ids to an array of elements (maps, polygons, etc) with those ids.
						 * @param {Object} _idsArray
						 * @param {Object} _type: annotation | polygon | route | map
						 */
						var _convertToElementsArray = function _convertToElementsArray(_idsArray, _type){
							var _resArray = [];
							
							for(var x = 0; x < _idsArray.length; x++){
								var _id = _idsArray[x];
								if(_id != null){
									_resArray.push(_convertToElement(_id, _type));
								}
							}
							
							return _resArray;
						};
						
						/**
						 * Converts an id to an element (maps, polygons, etc) with that id.
						 * @param {Object} _idsArray
						 * @param {Object} _type: annotation | polygon | route | map
						 */
						var _convertToElement = function _convertToElement(_id, _type){
							if(_type === "annotation")
								return new Annotation(_id);
							else if(_type === "polygon")
								return new Polygon(_id);
							else if(_type === "route")
								return new Route(_id);
							else if(_type === "layer")
								return new Layer(_id);
							else if(_type === "map")
								return new MapView(_id);
						};
						
					}; //End of Map object
					
				
					return new Map();
				}()),
                    
                    Notification : {
                        /** Create Toast Notification
                         * @param {function} Callback
                         * @param {String} message
                         * @param {Object} options {
                         *          height: {Number}            -default = 100
                         *          opacity: {Number}           -default = 1 [0 .. 1]
                         *          borderColor: {String}       -default = #D3D3D3
                         *          borderWidth: {Number}       -default = 1
                         *          borderRadius: {Number}      -default = 5
                         *          backgroundColor: {String}   -default = #E6E6E6
                         *          fontSize: {Number}          -default = 16
                         *          fontWeight: {String}        -default = normal ['bold', 'normal']
                         *          textColor: {String}         -default = #000000
                         *      }
                         * @return {String} JSON Information of Notification created */
                        createNotification: function (callback, msg, options) {
                            if (typeof msg !== 'string') {
                                // TODO definir formato de errores HTML
                                throw new Error('createNotification ERROR. msg param must be String type');
                            }
                            if (!(options instanceof Object)) {
                                options = null;
                            }
                            _genericMethodHandler.call(this, callback, 'API.SW.Notification.createNotification', [msg], options);
                        },
                    },
                    Social : {

                    },
                },
                HW : {
                    Acceloremeter : {

                    },
                    Battery : {

                    },
                    Camera : {

                    },
                    GeoLocation : {

                    },
                    Gesture : {

                    },
                    Media : {

                            /* VIDEO TODO */
                            /** Opens the photo gallery image picker.
                              * @param {function} Callback
                              * @param {Object} {'name': String} optional
                              * @return {Number} */
                            openPhotoGallery : function openPhotoGallery(callback, options) {
                            if (!(callback instanceof Function)) {
                                return false;
                            }
                            if (!(options instanceof Object)) {
                                options = null;
                            }
                                _genericMethodHandler.call(this, callback, 'API.SW.Media.openPhotoGallery', [], options);
                            },
                            /** Takes a screen shot of the visible UI on the device. This method is
                             *  asynchronous.
                             * @param {screenSotCallback} callback that will receive screenshot image as Blob object */
                            takeScreenshot : function takeScreenshot(callback) {
                                _genericMethodHandler.call(this, callback, 'API.SW.Media.takeScreenshot', [callback], null, true);
                            },
                            /** Takes a screen shot of the visible UI on the device. This method is
                             *  asynchronous.
                             * @param {pattern} [Number[]=[100, 300, 100, 200, 100, 50]] optional vibrate pattern only available for Android.*/
                            vibrate : function vibrate(pattern) {
                                if (Ti.App.isApple || pattern == null || !(pattern instanceof Array)) {
                                    Titanium.Media.vibrate();
                                }
                                // pattern only available for Android
                                Titanium.Media.vibrate(pattern);
                            },
                            /** Create new AudioPlayer
                             * @param {audioPlayerOptions} options
                             * @return {Object} audioPlayer Dummy*/
                            createAudioPlayer : function createAudioPlayer(options) {
                                return new dummyAudioPlayer(API, options, this);
                            },
                            /** Create new Video
                             * @param {videoPlayerOptions} options
                             * @return {Object} videoPlayer Dummy*/
                            createVideoPlayer : function createVideoPlayer(options) {
                                return new dummyVideoPlayer(API, options, this);
                            }
                    },
                    Network : {

                    },
                    System : {
                        /** Get device platform
                          * @param {function} Callback
                          * @param {String} Contact Name
                          * @return : String ('ios', 'android') */
                        getDeviceOs: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.HW.System.getDeviceOs');
                        },
                        /** Get System's OS version.
                          * @param {function} Callback
                          * @return : String */
                        getVersion: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.HW.System.getVersion');
                        },
                        /** Get device's Model.
                          * @param {function} Callback
                          * @return : String */
                        getModel: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.HW.System.getModel');
                        },
                        /** Get System's processor architecture.
                          * @param {function} Callback
                          * @return : String */
                        getArchitecture: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.HW.System.getArchitecture');
                        },
                        /** Get available memory
                          * @param {function} Callback
                          * @return : Int (Bytes)*/
                        getAvailableMemory: function (callback) {
                            _genericMethodHandler.call(this, callback, 'API.HW.System.getAvailableMemory');
                        },

                        /** Get short name of the JavaScript runtime in use.
                          * @param {function} Callback
                          * @return : String */
                        getJsRuntime: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.HW.System.getJsRuntime');
                        },

                        /** Get the manufacturer of the device.
                          * @param {function} Callback
                          * @return : String */
                        getManufacturer: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.HW.System.getManufacturer');
                        },

                        /** Get the number of processing cores.
                          * @param {function} Callback
                          * @return : String */
                        getProcessorCount: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.HW.System.getProcessorCount');
                        },

                        /** Get system name
                          * @param {function} Callback
                          * @return : String */
                        getUsername: function(callback) {
                            _genericMethodHandler.call(this, callback, 'API.HW.System.getUsername');
                        },

                        /** Get system's default language.
                          * @param {function} Callback
                          * @return : String */
                        getLocale: function() {
                            _genericMethodHandler.call(this, callback, 'API.HW.System.getLocale');
                        },
                    },
                }
            }
    });

// EVENTS
    var _invokeEventCallbacks = function (data) {
            var i;
            var publicEvent = data.publicEvent;

            Ti.API.info('[APIBridge] Invoking HTML callbacks for event: ' + publicEvent + ' with data:' + JSON.stringify(data));

            if (eventHandlers[publicEvent] != null) { 
                if (eventHandlers[publicEvent].length > 0) {
                    for (i = 0; i < eventHandlers[publicEvent].length; i ++) {
                        Ti.API.info('[APIBridge] invocando event callback html ' + publicEvent);
                        eventHandlers[publicEvent][i](data);
                    }
                }
            } else {
                // TODO Error. Callback not found
                Ti.API.info('[APIBridge] error in _invokeEventCallbacks publicEvent:' + publicEvent + ', eventHandlers: ' + JSON.stringify(eventHandlers));
            }
    };

    Object.defineProperty(window.API, 'addEventListener', {
        value: function addEventListener(publicEvent, handler) {
            Ti.API.info('[APIBridge] addeventlistener de ' + publicEvent);
            if (eventHandlers[publicEvent] == null || eventHandlers[publicEvent].length <= 0) {
                // First event listener for this publicEvent
                eventHandlers[publicEvent] = [];
                Ti.API.info(' [APIBridge] eventHandlers[' + publicEvent + '].length : ' + eventHandlers[publicEvent].length);
                // Listen the event
                Ti.App.addEventListener(publicEvent, _invokeEventCallbacks);
            }
            eventHandlers[publicEvent].push(handler);
            Ti.API.info('[APIBridge] event handler added');
            Ti.API.info('[APIBridge] eventHandlers[' + publicEvent + '].length : ' + eventHandlers[publicEvent].length);

            // Subscribe this view to publicEvent
            Ti.App.fireEvent('APIEvent', {'action': 'addEventListener', 'event': publicEvent, 'viewId': id});
        }
    });

    Object.preventExtensions(window.API.addEventListener);

    Object.defineProperty(window.API, 'removeEventListener', {
        value: function removeEventListener(publicEvent, handler) {
            var index;

            Ti.API.info('[APIBridge] eventHandlers[' + publicEvent + '].length : ' + eventHandlers[publicEvent].length);
            if (eventHandlers[publicEvent] == null || eventHandlers[publicEvent].length <= 0) {
                return false;
            }
            index = eventHandlers[publicEvent].indexOf(handler);
            eventHandlers[publicEvent].splice(index, 1);
            Ti.API.info('[APIBridge] event handler removed');
            Ti.API.info('[APIBridge] eventHandlers[' + publicEvent + '].length : ' + eventHandlers[publicEvent].length);
            // remove listener
            Ti.App.removeEventListener(publicEvent, _invokeEventCallbacks);

            // Unsubscribe this view to publicEvent
            Ti.App.fireEvent('APIEvent', {'action': 'removeEventListener', 'event': publicEvent, 'viewId': id});
        }
    });

    Object.preventExtensions(window.API.removeEventListener);
    /* Audio Dummy */
    // TODO jsdoc
    var dummyAudioPlayer = function dummyAudioPlayer(API, options) {

        if(appleOS === true){
            Ti.API.info('******* iOS System LOADED *******');
            this.STATE_BUFFERING = 5;
            this.STATE_INITIALIZED = 0;
            this.STATE_PAUSED = 8;
            this.STATE_PLAYING  = 4;
            this.STATE_STARTING  = 1;
            this.STATE_STOPPED = 7;
            this.STATE_WAITING_FOR_DATA = 2;
            this.STATE_WAITING_FOR_QUEUE = 3;
        }
        else {
            Ti.API.info('******* Android System LOADED *******');
            this.STATE_BUFFERING = 0;
            this.STATE_INITIALIZED = 1;
            this.STATE_PAUSED = 2;
            this.STATE_PLAYING  = 3;
            this.STATE_STARTING  = 4;
            this.STATE_STOPPED = 5;
            this.STATE_WAITING_FOR_DATA = 7;
            this.STATE_WAITING_FOR_QUEUE = 8;
        }
        this.STATE_STOPPING = 6;

        this.id = null;
        this.pendings = [];
        this.callbacks = {
            'audioChange': [],
            'audioProgress': []
        };
        this.pendingEvents = {
            'audioChange': {},
            'audioProgress': {}
        };
        this.lastChange = -1;
        this.lastProgress = -1;
        this.busy = true;
        Ti.API.info('[Audio DUMMY] STATE: creating');
        this.state = 'creating';

        var callback = function(id) {
            Ti.API.info('[Audio DUMMY].............. available id:' + id);
            this.id = id;
            this.syncAddEventListener('audioChange', this.changeHandler.bind(this));
            this.syncAddEventListener('audioProgress', this.processHandler.bind(this));
            genericCallback.call(this, id);
            Ti.API.info('[Audio DUMMY] STATE: stoped');
            this.state = 'stopped';
        };
        if (!(options instanceof Object)) {
            options = null;
        }
        Ti.API.info('[Audio DUMMY] waiting for audioPlayer id ..............');
        _genericMethodHandler.call(API, callback.bind(this), 'API.HW.Media.createAudioPlayer', [], options);
    };

    // Public
    dummyAudioPlayer.prototype.addEventListener = function addEventListener(publicEvent, callback) {
        Ti.API.info('[Audio DUMMY] 13 - addEventListener');
        addProcess.call(this, 13, {'publicEvent': publicEvent, 'callback': callback});
    };

    dummyAudioPlayer.prototype.removeEventListener = function removeEventListener(publicEvent, callback) {
        Ti.API.info('[Audio DUMMY] 31 - removeEventListener');
        addProcess.call(this, 31, {'publicEvent': publicEvent, 'callback': callback});
    };

    dummyAudioPlayer.prototype.play = function play() {
        Ti.API.info('[Audio DUMMY] 1 - play');
        addProcess.call(this, 1);
    };

    dummyAudioPlayer.prototype.pause = function pause() {
        Ti.API.info('[Audio DUMMY] 2 - pause');
        addProcess.call(this, 2);
    };

    dummyAudioPlayer.prototype.stop = function stop() {
        Ti.API.info('[Audio DUMMY] 3 - stop');
        addProcess.call(this, 3);
    };

    dummyAudioPlayer.prototype.release = function release() {
        Ti.API.info('[Audio DUMMY] 6 - release');
        addProcess.call(this, 6);
    };

    dummyAudioPlayer.prototype.reset = function reset() {
        Ti.API.info('[Audio DUMMY] 7 - reset');
        addProcess.call(this, 7);
    };

    dummyAudioPlayer.prototype.setURL = function setURL(url) {
        Ti.API.info('[Audio DUMMY] 4 - setURL');
        addProcess.call(this, 4, {'url': url});
    };

    dummyAudioPlayer.prototype.setAudioPlayerVolume = function setAudioPlayerVolume(vol) {
        Ti.API.info('[Audio DUMMY] 5 - setVolume: ' + vol);
        addProcess.call(this, 5, {'value': vol});
    };

    // Private
    dummyAudioPlayer.prototype.changeHandler = function changeHandler(event) {
        var i;

        if (this.lastChange + 1 == event.order) {
            // Real Next
            Ti.API.info('[Audio DUMMY eventHandler] change event ' + event.order + ', viewId: ' + id + ', entityId: ' + this.id +', event: ' + JSON.stringify(event));
            this.lastChange += 1;
            for (i = 0; i < this.callbacks.audioChange.length; i ++) {
                Ti.API.info('[Audio DUMMY eventHandler] launching HTML callback... ' + this.callbacks.audioChange[i]);
                this.callbacks.audioChange[i](event);
            }
            if (this.pendingEvents.audioChange[event.order + 1] != null) {
                // Pop waiting event
                this.changeHandler(this.pendingEvents.audioChange[event.order + 1]);
                delete this.pendingEvents.audioChange[event.order + 1];
            }
        } else if (this.lastChange + 1 < event.order) {
            // Push this event
            Ti.API.info('[Audio DUMMY eventHandler] save this change event: ' + event.order);
            this.pendingEvents.audioChange[event.order] = event;
        } else {
            // ORDER ERROR
            Ti.API.info('[Audio DUMMY eventHandler] change event order error ' + event.order + ' < ' + this.lastChange + ', event: ' + JSON.stringify(event));
            // discard event
        }
    };

    dummyAudioPlayer.prototype.processHandler = function processHandler(event) {
        var i;

        if (this.lastProgress + 1 == event.order) {
            // Real Next
            Ti.API.info('[Audio DUMMY eventHandler] progress event ' + event.order + ', viewId: ' + id + ', entityId: ' + this.id +', event: ' + JSON.stringify(event));
            this.lastProgress += 1;
            for (i = 0; i < this.callbacks.audioProgress.length; i ++) {
                this.callbacks.audioProgress[i](event);
            }
            if (this.pendingEvents.audioProgress[event.order + 1] != null) {
                // Pop waiting event
                this.changeHandler(this.pendingEvents.audioProgress[event.order + 1]);
                delete this.pendingEvents.audioProgress[event.order + 1];
            }
        } else if (this.lastProgress + 1 < event.order) {
            // Push this event
            Ti.API.info('[Audio DUMMY eventHandler] save this progress event: ' + event.order);
            this.pendingEvents.audioProgress[event.order]= event;
        } else {
            // ORDER ERROR
            Ti.API.info('[Audio DUMMY eventHandler] progress event order error ' + event.order + ' < ' + this.lastChange + ', event: ' + JSON.stringify(event));
            // discard event
        }
    };

    dummyAudioPlayer.prototype.syncAddEventListener = function SyncAddEventListener(publicEvent, callback) {
        Ti.API.info('[Audio DUMMY] Sync-addEventListener. event: ' + publicEvent + ', viewId: ' + id + ', entityId: ' + this.id);
        if (eventHandlers[publicEvent] == null || eventHandlers[publicEvent].length <= 0) {
            // First event listener for this publicEvent
            eventHandlers[publicEvent] = [];
            // Listen the event
            Ti.App.addEventListener(publicEvent, _invokeEventCallbacks);
        }
        eventHandlers[publicEvent].push(callback);
        Ti.API.info('[Audio DUMMY] Sync-addEventListener pre-fire');

        // Subscribe this view to publicEvent
        Ti.App.fireEvent('APIEvent', {'action': 'addEventListener', 'event': publicEvent, 'viewId': id, 'entityId': this.id, 'dummy': 'audio'});
        Ti.API.info('[Audio DUMMY] Sync-addEventListener post-fire');
    };

    dummyAudioPlayer.prototype.syncRemoveEventListener = function syncRemoveEventListener(publicEvent, callback) {
        Ti.API.info('[Audio DUMMY] Sync-removeEventListener. event:' + publicEvent + ', viewId: ' + id + ', entityId: ' + this.id);
        var index;

        if (eventHandlers[publicEvent] == null || eventHandlers[publicEvent].length <= 0) {
            return false;
        }
        index = eventHandlers[publicEvent].indexOf(callback);
        eventHandlers[publicEvent].splice(index, 1);

        // remove listener
        Ti.App.removeEventListener(publicEvent, _invokeEventCallbacks);

        // Unsubscribe this view to publicEvent
        Ti.App.fireEvent('APIEvent', {'action': 'removeEventListener', 'event': publicEvent, 'viewId': id, 'entityId': this.id, 'dummy': 'audio'});
    };

    /*
     * play      -> 1
     * pause     -> 2
     * stop      -> 3
     * setURL    -> 4
     * setVolume -> 5
     * release   -> 6
     * reset     -> 7
     * addEventListener    -> 13
     * removeEventListener -> 31
     */
    var addProcess = function addProcess(type, options) {
        Ti.API.info('[Audio DUMMY] Add new order to AudioPlayer:' + type);
        this.pendings.push({'type': type, 'options': options});
        process.call(this);
    };

    var process = function process() {
        var i, isRedund;

        Ti.API.info('[Audio DUMMY] trying to process. Busy-> ' + this.busy + '; pendings: ' + JSON.stringify(this.pendings));
        if (!this.busy && this.pendings.length > 0) {
            var newOrder = this.pendings.shift();
            Ti.API.info('[Audio DUMMY] ¡¡¡__ processing ' + JSON.stringify(newOrder));
            this.busy = true;
            switch(newOrder.type) {
                case 1:
                    // PLAY
                    isRedund = false;
                    for (i = 0; i < this.pendings.length; i ++) {
                        if (this.pendings[i].type == 1) {
                            isRedund = true;
                            break;
                        }
                    }
                    if (!isRedund) {
                        _genericMethodHandler.call(API, playCallback.bind(this), 'API.HW.Media.playAudioPlayer', [this.id], null);
                    } else {
                        // Discard this order.
                         Ti.API.info('[Audio DUMMY] Discarding PLAY');
                         genericCallback.call(this);
                    }
                    break;
                case 2:
                    // PAUSE
                    isRedund = false;
                    for (i = 0; i < this.pendings.length; i ++) {
                        if (this.pendings[i].type == 2) {
                            isRedund = true;
                            break;
                        }
                    }
                    if (!isRedund) {
                        _genericMethodHandler.call(API, pauseCallback.bind(this), 'API.HW.Media.pauseAudioPlayer', [this.id], null);
                    } else {
                        // Discard this order.
                         Ti.API.info('[Audio DUMMY] Discarding PAUSE');
                         genericCallback.call(this);
                    }
                    break;
                case 3:
                    // STOP
                    isRedund = false;
                    for (i = 0; i < this.pendings.length; i ++) {
                        if (this.pendings[i].type == 3) {
                            isRedund = true;
                            break;
                        }
                    }
                    if (!isRedund) {
                        _genericMethodHandler.call(API, stopCallback.bind(this), 'API.HW.Media.stopAudioPlayer', [this.id], null);
                    } else {
                        // Discard this order.
                         Ti.API.info('[Audio DUMMY] Discarding STOP');
                         genericCallback.call(this);
                    }
                    break;
                case 4:
                    // SETURL
                    isRedund = false;
                    for (i = 0; i < this.pendings.length; i ++) {
                        if (this.pendings[i].type == 4) {
                            isRedund = true;
                            break;
                        }
                    }
                    if (!isRedund) {
                        _genericMethodHandler.call(API, setURLCallback.bind(this), 'API.HW.Media.setAudioPlayerURL', [this.id, newOrder.options.url], null);
                    } else {
                        // Discard this order.
                         Ti.API.info('[Audio DUMMY] Discarding setURL');
                         genericCallback.call(this);
                    }
                    break;
                case 5:
                    // SET VOLUME
                    _genericMethodHandler.call(API, volumeCallback.bind(this), 'API.HW.Media.setAudioPlayerVolume', [this.id, newOrder.options.value], null);
                    break;
                case 6:
                    // RELEASE
                    _genericMethodHandler.call(API, releaseCallback.bind(this), 'API.HW.Media.releaseAudioPlayer', [this.id], null);
                    break;
                case 7:
                    // RESET
                    _genericMethodHandler.call(API, resetCallback.bind(this), 'API.HW.Media.resetAudioPlayer', [this.id], null);
                    break;
                case 13:
                    // AddEventListener
                    Ti.API.info('[Audio DUMMY] addEventListener ' + newOrder.options.publicEvent + ', entityId: ' + this.id);
                    if (newOrder.options.publicEvent == 'audioChange') {
                        this.callbacks.audioChange.push(newOrder.options.callback);
                    } else if (newOrder.options.publicEvent == 'audioProgress') {
                        this.callbacks.audioProgress.push(newOrder.options.callback);
                    }
                     else {
                        Ti.API.info('[Audio DUMMY.addEventListener] Error. unknown event: ' + newOrder.options.publicEvent);
                    }
                    genericCallback.call(this);
                    break;
                case 31:
                    // RemoveEventListener
                    Ti.API.info('[Audio DUMMY] removeEventListener: ' + newOrder.options.publicEvent);
                    if (newOrder.options.publicEvent == 'audioChange') {
                        this.callbacks.audioChange.pop(newOrder.options.callback);
                    } else if (newOrder.options.publicEvent == 'audioProgress') {
                        this.callbacks.audioProgress.pop(newOrder.options.callback);
                    } else {
                        Ti.API.info('[Audio DUMMY.addEventListener] Error. unknown event: ' + newOrder.options.publicEvent);
                    }
                    genericCallback.call(this);
                    break;
                default:
                    // ERROR
                    Ti.API.info('[Audio DUMMY] Error in AudioPlayerDummy');
                    break;
            }
        }
    };

    var playCallback = function playCallback() {
        Ti.API.info('[Audio DUMMY] PLAY Callback');
        Ti.API.info('[Audio DUMMY] STATE: initializing');
        this.state = 'initializing';
        genericCallback.call(this);
    };

    var pauseCallback = function pauseCallback() {
        Ti.API.info('[Audio DUMMY] PAUSE Callback');
        Ti.API.info('[Audio DUMMY] STATE: pausing');
        this.state = 'pausing';
        genericCallback.call(this);
    };

    var stopCallback = function stopCallback() {
        Ti.API.info('[Audio DUMMY] STOP Callback');
        Ti.API.info('[Audio DUMMY] STATE: stopping');
        this.state = 'stopping';
        genericCallback.call(this);
    };

    var setURLCallback = function setURLCallback() {
        Ti.API.info('[Audio DUMMY] SetURL Callback.');
        Ti.API.info('[Audio DUMMY] current STATE: ' + this.state);
        genericCallback.call(this);
    };


    var volumeCallback = function volumeCallback() {
        Ti.API.info('[Audio DUMMY] volume Callback.');
        Ti.API.info('[Audio DUMMY] current STATE: ' + this.state);
        genericCallback.call(this);
    };

    var releaseCallback = function releaseCallback() {
        Ti.API.info('[Audio DUMMY] release Callback.');
        Ti.API.info('[Audio DUMMY] STATE: clean');
        this.state = 'clean';
        genericCallback.call(this);
    };

    var resetCallback = function resetCallback() {
        Ti.API.info('[Audio DUMMY] reset Callback.');
        Ti.API.info('[Audio DUMMY] STATE: resetting');
        this.state = 'resetting';
        genericCallback.call(this);
    };

    var genericCallback = function genericCallback() {
        this.busy = false;
        if (this.pendings.length > 0) {
            Ti.API.info('[Audio DUMMY] busy');
            process.call(this);
        } else {
            Ti.API.info('[Audio DUMMY] free');
        }
    };
    // End Audio Dummy

    /* Video Dummy */
    // TODO jsdoc
    var dummyVideoPlayer = function dummyVideoPlayer(API, options) {

        this.id = null;
        this.pendings = [];
        this.callbacks = {
            'videoComplete': []
        };
        this.pendingEvents = {
            'videoComplete': {}
        };
        this.lastComplete = -1;
        this.busy = true;
        Ti.API.info('[Video DUMMY] STATE: creating');
        this.state = 'creating';

        var callback = function(id) {
            Ti.API.info('[Video DUMMY].............. available id:' + id);
            this.id = id;
            this.completeHandler = this.videoCompleteHandler.bind(this);
            this.syncAddEventListener('videoComplete', this.completeHandler.bind(this));
            videoGenericCallback.call(this, id);
            Ti.API.info('[Video DUMMY] STATE: stoped');
            this.state = 'stopped';
        };
        if (!(options instanceof Object)) {
            options = null;
        }
        Ti.API.info('[Video DUMMY] waiting for videoPlayer id ..............');
        _genericMethodHandler.call(API, callback.bind(this), 'API.HW.Media.createVideoPlayer', [id], options);
    };

    // Public
    dummyVideoPlayer.prototype.addEventListener = function addEventListener(publicEvent, callback) {
        Ti.API.info('[Video DUMMY] 13 - addEventListener');
        addVideoProcess.call(this, 13, {'publicEvent': publicEvent, 'callback': callback});
    };

    dummyVideoPlayer.prototype.removeEventListener = function removeEventListener(publicEvent, callback) {
        Ti.API.info('[Video DUMMY] 13 - removeEventListener');
        addVideoProcess.call(this, 13, {'publicEvent': publicEvent, 'callback': callback});
    };

    dummyVideoPlayer.prototype.play = function play() {
        Ti.API.info('[Video DUMMY] 1 - play');
        addVideoProcess.call(this, 1);
    };

    dummyVideoPlayer.prototype.pause = function pause() {
        Ti.API.info('[Video DUMMY] 2 - pause');
        addVideoProcess.call(this, 2);
    };

    dummyVideoPlayer.prototype.stop = function stop() {
        Ti.API.info('[Video DUMMY] 3 - stop');
        addVideoProcess.call(this, 3);
    };

    dummyVideoPlayer.prototype.setURL = function setURL(url) {
        Ti.API.info('[Video DUMMY] 4 - setVideoURL');
        addVideoProcess.call(this, 4, {'url': url});
    };

    dummyVideoPlayer.prototype.setBound = function setBound(options) {
        Ti.API.info('[Video DUMMY] - 5 setVideoBound');
        if (options == null) {
            options = {};
        }
        addVideoProcess.call(this, 5, {'pos': options});
    };

    dummyVideoPlayer.prototype.destroy = function destroy() {
        Ti.API.info('[Video DUMMY] 6 - destroy');
        addVideoProcess.call(this, 6);
        Ti.API.info('[Video DUMMY] 6 - destroy');
        addVideoProcess.call(this, 6);
    };

    dummyVideoPlayer.prototype.setFullScreen = function setFullScreen() {
        Ti.API.info('[Video DUMMY] 7 - setFullScreen');
        addVideoProcess.call(this, 7);
    };

    // Private
    dummyVideoPlayer.prototype.videoCompleteHandler = function videoCompleteHandler(event) {
        Ti.API.info('[Video DUMMY videoCompleteHandler] complete event: ' + JSON.stringify(event));
        var i;

        if (this.lastComplete + 1 == event.order) {
            // Real Next
            Ti.API.info('[Video DUMMY videoCompleteHandler] complete event ' + event.order + ', viewId: ' + id + ', entityId: ' + this.id +', event: ' + JSON.stringify(event));
            this.lastComplete += 1;
            for (i = 0; i < this.callbacks.videoComplete.length; i ++) {
                Ti.API.info('[Video DUMMY videoCompleteHandler] launching HTML callback... ' + this.callbacks.videoComplete[i]);
                this.callbacks.videoComplete[i](event);
            }
            if (this.pendingEvents.videoComplete[event.order + 1] != null) {
                // Pop waiting event
                this.videoCompleteHandler(this.pendingEvents.videoComplete[event.order + 1]);
                delete this.pendingEvents.videoComplete[event.order + 1];
            }
        } else if (this.lastComplete + 1 < event.order) {
            // Push this event
            Ti.API.info('[Video DUMMY videoCompleteHandler] save this complete event: ' + event.order);
            this.pendingEvents.videoComplete[event.order] = event;
        } else {
            // ORDER ERROR
            Ti.API.info('[Video DUMMY videoCompleteHandler] complete event order error ' + event.order + ' < ' + this.lastComplete + ', event: ' + JSON.stringify(event));
            // discard event
        }
    };

    dummyVideoPlayer.prototype.syncAddEventListener = function SyncAddEventListener(publicEvent, callback) {
        Ti.API.info('[Video DUMMY] Sync-addEventListener. event: ' + publicEvent + ', viewId: ' + id + ', entityId: ' + this.id);
        if (eventHandlers[publicEvent] == null || eventHandlers[publicEvent].length <= 0) {
            // First event listener for this publicEvent
            eventHandlers[publicEvent] = [];
            // Listen the event
            Ti.App.addEventListener(publicEvent, _invokeEventCallbacks);
        }
        eventHandlers[publicEvent].push(callback);
        Ti.API.info('[Video DUMMY] Sync-addEventListener pre-fire');

        // Subscribe this view to publicEvent
        Ti.App.fireEvent('APIEvent', {'action': 'addEventListener', 'event': publicEvent, 'viewId': id, 'entityId': this.id, 'dummy': 'video'});
        Ti.API.info('[Video DUMMY] Sync-addEventListener post-fire');
    };

    dummyVideoPlayer.prototype.syncRemoveEventListener = function syncRemoveEventListener(publicEvent, callback) {
        Ti.API.info('[Video DUMMY] Sync-removeEventListener. event:' + publicEvent + ', viewId: ' + id + ', entityId: ' + this.id);
        var index;

        if (eventHandlers[publicEvent] == null || eventHandlers[publicEvent].length <= 0) {
            Ti.API.info('[Video DUMMY] Sync-removeEventListener. Error. eventListener not found. eventHandlers[publicEvent]:' + JSON.stringify(eventHandlers[publicEvent]));
            return false;
        }
        Ti.API.info('[Video DUMMY] Sync-removeEventListener. Listener cleaning handler list. eventHandlers[publicEvent]:' + JSON.stringify(eventHandlers[publicEvent]));
        index = eventHandlers[publicEvent].indexOf(callback);
        eventHandlers[publicEvent].splice(index, 1);

        // remove listener
        Ti.API.info('[Video DUMMY] Sync-removeEventListener. Listener Removed. eventHandlers[publicEvent]:' + JSON.stringify(eventHandlers[publicEvent]));
        Ti.App.removeEventListener(publicEvent, _invokeEventCallbacks);

        // Unsubscribe this view to publicEvent
        Ti.API.info('[Video DUMMY] Sync-removeEventListener. Unsuscrive this view to event (fireEvent removeEventListener) ' + publicEvent);
        Ti.App.fireEvent('APIEvent', {'action': 'removeEventListener', 'event': publicEvent, 'viewId': id, 'entityId': this.id, 'dummy': 'video'});
    };

    /*
     * play   -> 1
     * pause  -> 2
     * stop   -> 3
     * setURL -> 4
     */
    var addVideoProcess = function addVideoProcess(type, options) {
        Ti.API.info('[Video DUMMY] Add new order to AudioPlayer:' + type);
        this.pendings.push({'type': type, 'options': options});
        videoProcess.call(this);
    };

    var videoProcess = function videoProcess() {
        Ti.API.info('[Video DUMMY] trying to process. Busy-> ' + this.busy + '; pendings: ' + JSON.stringify(this.pendings));
        if (!this.busy && this.pendings.length > 0) {
            var newOrder = this.pendings.shift();
            Ti.API.info('[Video DUMMY] !!!!!!!!!- processing ' + JSON.stringify(newOrder));
            this.busy = true;
            switch(newOrder.type) {
                case 1:
                    // PLAY
                    _genericMethodHandler.call(API, videoPlayCallback.bind(this), 'API.HW.Media.playVideoPlayer', [this.id], null);
                    break;
                case 2:
                    // PAUSE
                    _genericMethodHandler.call(API, videoPauseCallback.bind(this), 'API.HW.Media.pauseVideoPlayer', [this.id], null);
                    break;
                case 3:
                    // STOP
                    _genericMethodHandler.call(API, videoStopCallback.bind(this), 'API.HW.Media.stopVideoPlayer', [this.id], null);
                    break;
                case 4:
                    // SETURL
                    _genericMethodHandler.call(API, videoSetURLCallback.bind(this), 'API.HW.Media.setVideoPlayerURL', [this.id, newOrder.options.url], null);
                    break;
                case 5:
                    // SETBounding
                    _genericMethodHandler.call(API, videoSetBoundCallback.bind(this), 'API.HW.Media.setVideoPlayerBound', [id, this.id, newOrder.options.pos], null);
                    break;
                case 6:
                    // DESTROY
                    this.syncRemoveEventListener('videoComplete', this.completeHandler);
                    _genericMethodHandler.call(API, videoDestroyCallback.bind(this), 'API.HW.Media.destroyVideoPlayer', [this.id], null);
                    break;
                case 7:
                    // FULLSCREEN
                    _genericMethodHandler.call(API, videoFullScreenCallback.bind(this), 'API.HW.Media.setFullScreen', [this.id], null);
                    break;
                case 13:
                    // AddEventListener
                    Ti.API.info('[Video DUMMY] addEventListener ' + newOrder.options.publicEvent + ', entityId: ' + this.id);
                    if (newOrder.options.publicEvent == 'videoComplete') {
                        this.callbacks.videoComplete.push(newOrder.options.callback);
                    } else {
                        Ti.API.info('[Video DUMMY.addEventListener] Error. unknown event: ' + newOrder.options.publicEvent);
                    }
                    videoGenericCallback.call(this);
                    break;
                case 31:
                    // RemoveEventListener
                    Ti.API.info('[Video DUMMY] removeEventListener: ' + newOrder.options.publicEvent);
                    if (newOrder.options.publicEvent == 'videoComplete') {
                        this.callbacks.videoComplete.pop(newOrder.options.callback);
                    } else {
                        Ti.API.info('[Video DUMMY.addEventListener] Error. unknown event: ' + newOrder.options.publicEvent);
                    }
                    videoGenericCallback.call(this);
                    break;
                default:
                    // ERROR
                    Ti.API.info('[Video DUMMY] Error in AudioPlayerDummy');
                    break;
            }
        }
    };

    // Video callbacks
    var videoPlayCallback = function videoPlayCallback() {
        Ti.API.info('[Video DUMMY] Play Callback');
        this.state = 'playing';
        videoGenericCallback.call(this);
    };

    var videoPauseCallback = function videoPauseCallback() {
        Ti.API.info('[Video DUMMY] Pause Callback');
        this.state = 'pausing';
        videoGenericCallback.call(this);
    };

    var videoStopCallback = function videoStopCallback() {
        Ti.API.info('[Video DUMMY] Stop Callback');
        this.state = 'stopping';
        videoGenericCallback.call(this);
    };

    var videoSetBoundCallback = function videoSetBoundCallback() {
        Ti.API.info('[Video DUMMY] SetBound Callback');
        videoGenericCallback.call(this);
    };

    var videoSetURLCallback = function videoSetURLCallback() {
        Ti.API.info('[Video DUMMY] setURL Callback');
        videoGenericCallback.call(this);
    };

    var videoFullScreenCallback = function videoFullScreenCallback() {
        Ti.API.info('[Video DUMMY] fullScreen Callback');
        videoGenericCallback.call(this);
    };

    var videoDestroyCallback = function videoDestroyCallback() {
        Ti.API.info('[Video DUMMY] ************destroy this VideoPlayer Dummy: ' + this.id + '**********');
        //delete this;
    };

    var videoGenericCallback = function videoGenericCallback() {
        this.busy = false;
        if (this.pendings.length > 0) {
            Ti.API.info('[Video DUMMY] busy');
            videoProcess.call(this);
        } else {
            Ti.API.info('[Video DUMMY] free');
        }
    };
    // End Video Dummy
    
    
}());